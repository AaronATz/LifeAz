(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('element-resize-detector')) :
    typeof define === 'function' && define.amd ? define('ngx-ellipsis', ['exports', '@angular/core', 'element-resize-detector'], factory) :
    (factory((global['ngx-ellipsis'] = {}),global.ng.core,global.elementResizeDetectorMaker));
}(this, (function (exports,core,elementResizeDetectorMaker) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Directive to truncate the contained text, if it exceeds the element's boundaries
     * and append characters (configurable, default '...') if so.
     */
    var EllipsisDirective = /** @class */ (function () {
        /**
         * The directive's constructor
         */
        function EllipsisDirective(elementRef, renderer, ngZone) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.ngZone = ngZone;
            /**
             * Whether the ellipsis should be applied on window resize
             */
            this.applyOnWindowResize = false;
            /**
             * The ellipsis-content html attribute
             * If passed this is used as content, else contents
             * are fetched from innerHTML
             */
            this.ellipsisContent = null;
            /**
             * The ellipsis-click-more html attribute
             *  If anything is passed, the ellipsisCharacters will be
             *  wrapped in <a></a> tags and an event handler for the
             *  passed function will be added to the link
             */
            this.moreClickEmitter = new core.EventEmitter();
        }
        /**
         * Utility method to quickly find the largest number for
         * which `callback(number)` still returns true.
         * @param  max      Highest possible number
         * @param  callback Should return true as long as the passed number is valid
         * @return          Largest possible number
         */
        /**
         * Utility method to quickly find the largest number for
         * which `callback(number)` still returns true.
         * @param {?} max      Highest possible number
         * @param {?} callback Should return true as long as the passed number is valid
         * @return {?} Largest possible number
         */
        EllipsisDirective.numericBinarySearch = /**
         * Utility method to quickly find the largest number for
         * which `callback(number)` still returns true.
         * @param {?} max      Highest possible number
         * @param {?} callback Should return true as long as the passed number is valid
         * @return {?} Largest possible number
         */
            function (max, callback) {
                /** @type {?} */
                var low = 0;
                /** @type {?} */
                var high = max;
                /** @type {?} */
                var best = -1;
                /** @type {?} */
                var mid;
                while (low <= high) {
                    // tslint:disable-next-line:no-bitwise
                    mid = ~~((low + high) / 2);
                    /** @type {?} */
                    var result = callback(mid);
                    if (!result) {
                        high = mid - 1;
                    }
                    else {
                        best = mid;
                        low = mid + 1;
                    }
                }
                return best;
            };
        /**
         * Escape html special characters
         * @param unsafe string potentially containing special characters
         * @return       escaped string
         */
        /**
         * Escape html special characters
         * @param {?} unsafe string potentially containing special characters
         * @return {?} escaped string
         */
        EllipsisDirective.escapeHtml = /**
         * Escape html special characters
         * @param {?} unsafe string potentially containing special characters
         * @return {?} escaped string
         */
            function (unsafe) {
                if (unsafe === undefined || unsafe === null) {
                    return '';
                }
                return String(unsafe)
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#039;');
            };
        /**
         * Angular's init view life cycle hook.
         * Initializes the element for displaying the ellipsis.
         */
        /**
         * Angular's init view life cycle hook.
         * Initializes the element for displaying the ellipsis.
         * @return {?}
         */
        EllipsisDirective.prototype.ngAfterViewInit = /**
         * Angular's init view life cycle hook.
         * Initializes the element for displaying the ellipsis.
         * @return {?}
         */
            function () {
                // let the ellipsis characters default to '...':
                if (this.ellipsisCharacters === '') {
                    this.ellipsisCharacters = '...';
                }
                if (this.moreClickEmitter.observers.length > 0) {
                    this.ellipsisCharacters = "<a href=\"#\" class=\"ngx-ellipsis-more\">" + this.ellipsisCharacters + "</a>";
                }
                // perform regex replace on word boundaries:
                if (!this.ellipsisWordBoundaries) {
                    this.ellipsisWordBoundaries = '';
                }
                this.ellipsisWordBoundaries = '[' + this.ellipsisWordBoundaries.replace(/\\n/, '\n').replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') + ']';
                // store the original contents of the element:
                this.elem = this.elementRef.nativeElement;
                if (this.ellipsisContent) {
                    this.originalText = EllipsisDirective.escapeHtml(this.ellipsisContent);
                }
                else if (!this.originalText) {
                    this.originalText = this.elem.innerText;
                }
                // add a wrapper div (required for resize events to work properly):
                this.renderer.setProperty(this.elem, 'innerHTML', '');
                this.innerElem = this.renderer.createElement('div');
                this.renderer.addClass(this.innerElem, 'ngx-ellipsis-inner');
                /** @type {?} */
                var text = this.renderer.createText(this.originalText);
                this.renderer.appendChild(this.innerElem, text);
                this.renderer.appendChild(this.elem, this.innerElem);
                // start listening for resize events:
                this.addResizeListener(true);
            };
        /**
         * Angular's change life cycle hook.
         * Change original text (if the ellipsis-content has been passed)
         * and re-render
         */
        /**
         * Angular's change life cycle hook.
         * Change original text (if the ellipsis-content has been passed)
         * and re-render
         * @return {?}
         */
        EllipsisDirective.prototype.ngOnChanges = /**
         * Angular's change life cycle hook.
         * Change original text (if the ellipsis-content has been passed)
         * and re-render
         * @return {?}
         */
            function () {
                if (!this.elem
                    || typeof this.ellipsisContent === 'undefined'
                    || this.originalText === EllipsisDirective.escapeHtml(this.ellipsisContent)) {
                    return;
                }
                this.originalText = EllipsisDirective.escapeHtml(this.ellipsisContent);
                this.applyEllipsis();
            };
        /**
         * Angular's destroy life cycle hook.
         * Remove event listeners
         */
        /**
         * Angular's destroy life cycle hook.
         * Remove event listeners
         * @return {?}
         */
        EllipsisDirective.prototype.ngOnDestroy = /**
         * Angular's destroy life cycle hook.
         * Remove event listeners
         * @return {?}
         */
            function () {
                this.removeAllListeners();
            };
        /**
         * remove all resize listeners
         */
        /**
         * remove all resize listeners
         * @return {?}
         */
        EllipsisDirective.prototype.removeAllListeners = /**
         * remove all resize listeners
         * @return {?}
         */
            function () {
                if (this.destroyMoreClickListener) {
                    this.destroyMoreClickListener();
                }
                this.removeResizeListener();
            };
        /**
         * Set up an event listener to call applyEllipsis() whenever a resize has been registered.
         * The type of the listener (window/element) depends on the resizeDetectionStrategy.
         * @param triggerNow=false if true, the ellipsis is applied immediately
         */
        /**
         * Set up an event listener to call applyEllipsis() whenever a resize has been registered.
         * The type of the listener (window/element) depends on the resizeDetectionStrategy.
         * @param {?=} triggerNow
         * @return {?}
         */
        EllipsisDirective.prototype.addResizeListener = /**
         * Set up an event listener to call applyEllipsis() whenever a resize has been registered.
         * The type of the listener (window/element) depends on the resizeDetectionStrategy.
         * @param {?=} triggerNow
         * @return {?}
         */
            function (triggerNow) {
                if (triggerNow === void 0) {
                    triggerNow = false;
                }
                if (typeof (this.resizeDetectionStrategy) === 'undefined') {
                    this.resizeDetectionStrategy = '';
                }
                switch (this.resizeDetectionStrategy) {
                    case 'window':
                        this.applyOnWindowResize = true;
                        if (triggerNow) {
                            this.applyEllipsis();
                        }
                        break;
                    case 'element-resize-detector-object':
                        this.addElementResizeListener(false);
                        break;
                    default:
                        if (typeof (console) !== 'undefined') {
                            console.warn("No such ellipsis-resize-detection strategy: '" + this.resizeDetectionStrategy + "'. Using 'element-resize-detector' instead");
                        }
                    // tslint:disable-next-line:no-switch-case-fall-through
                    case 'element-resize-detector':
                    case '':
                        this.addElementResizeListener();
                        break;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        EllipsisDirective.prototype.onResize = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                this.ngZone.run(function () {
                    if (_this.applyOnWindowResize) {
                        _this.applyEllipsis();
                    }
                });
            };
        /**
         * Set up an event listener to call applyEllipsis() whenever the element
         * has been resized.
         * @param scrollStrategy=true Use the default elementResizeDetector's - strategy - s. https://github.com/wnr/element-resize-detector
         */
        /**
         * Set up an event listener to call applyEllipsis() whenever the element
         * has been resized.
         * @param {?=} scrollStrategy
         * @return {?}
         */
        EllipsisDirective.prototype.addElementResizeListener = /**
         * Set up an event listener to call applyEllipsis() whenever the element
         * has been resized.
         * @param {?=} scrollStrategy
         * @return {?}
         */
            function (scrollStrategy) {
                var _this = this;
                if (scrollStrategy === void 0) {
                    scrollStrategy = true;
                }
                if (!EllipsisDirective.elementResizeDetector) {
                    /** @type {?} */
                    var maker = elementResizeDetectorMaker;
                    EllipsisDirective.elementResizeDetector = maker({ strategy: scrollStrategy ? 'scroll' : 'object' });
                }
                /** @type {?} */
                var calledAsynchronously = false;
                EllipsisDirective.elementResizeDetector.listenTo(this.elementRef.nativeElement, function () {
                    if (!calledAsynchronously) {
                        // elementResizeDetector fires the event directly after re-attaching the listener
                        // -> discard that first event:
                        return;
                    }
                    _this.applyEllipsis();
                });
                calledAsynchronously = true;
            };
        /**
         * Stop listening for any resize event.
         */
        /**
         * Stop listening for any resize event.
         * @return {?}
         */
        EllipsisDirective.prototype.removeResizeListener = /**
         * Stop listening for any resize event.
         * @return {?}
         */
            function () {
                if (this.resizeDetectionStrategy !== 'window') {
                    if (EllipsisDirective.elementResizeDetector && this.elem) {
                        EllipsisDirective.elementResizeDetector.removeAllListeners(this.elem);
                    }
                }
                else {
                    this.applyOnWindowResize = false;
                }
            };
        /**
         * Get the original text's truncated version. If the text really needed to
         * be truncated, this.ellipsisCharacters will be appended.
         * @param max the maximum length the text may have
         * @return string       the truncated string
         */
        /**
         * Get the original text's truncated version. If the text really needed to
         * be truncated, this.ellipsisCharacters will be appended.
         * @param {?} max the maximum length the text may have
         * @return {?} string       the truncated string
         */
        EllipsisDirective.prototype.getTruncatedText = /**
         * Get the original text's truncated version. If the text really needed to
         * be truncated, this.ellipsisCharacters will be appended.
         * @param {?} max the maximum length the text may have
         * @return {?} string       the truncated string
         */
            function (max) {
                if (!this.originalText || this.originalText.length <= max) {
                    return this.originalText;
                }
                /** @type {?} */
                var truncatedText = this.originalText.substr(0, max);
                if (this.ellipsisWordBoundaries === '[]' || this.originalText.charAt(max).match(this.ellipsisWordBoundaries)) {
                    return truncatedText + this.ellipsisCharacters;
                }
                /** @type {?} */
                var i = max - 1;
                while (i > 0 && !truncatedText.charAt(i).match(this.ellipsisWordBoundaries)) {
                    i--;
                }
                return truncatedText.substr(0, i) + this.ellipsisCharacters;
            };
        /**
         * Set the truncated text to be displayed in the inner div
         * @param max the maximum length the text may have
         * @param addMoreListener=false listen for click on the ellipsisCharacters if the text has been truncated
         */
        /**
         * Set the truncated text to be displayed in the inner div
         * @param {?} max the maximum length the text may have
         * @param {?=} addMoreListener
         * @return {?}
         */
        EllipsisDirective.prototype.truncateText = /**
         * Set the truncated text to be displayed in the inner div
         * @param {?} max the maximum length the text may have
         * @param {?=} addMoreListener
         * @return {?}
         */
            function (max, addMoreListener) {
                var _this = this;
                if (addMoreListener === void 0) {
                    addMoreListener = false;
                }
                /** @type {?} */
                var text = this.getTruncatedText(max);
                this.renderer.setProperty(this.innerElem, 'innerHTML', text);
                if (!addMoreListener) {
                    return;
                }
                // Remove any existing more click listener:
                if (this.destroyMoreClickListener) {
                    this.destroyMoreClickListener();
                }
                // If the text has been truncated, add a more click listener:
                if (text !== this.originalText) {
                    this.destroyMoreClickListener = this.renderer.listen(this.innerElem, 'click', function (e) {
                        if (!e.target || e.target.className !== 'ngx-ellipsis-more') {
                            return;
                        }
                        e.preventDefault();
                        _this.moreClickEmitter.emit(e);
                    });
                }
            };
        /**
         * Display ellipsis in the inner div if the text would exceed the boundaries
         */
        /**
         * Display ellipsis in the inner div if the text would exceed the boundaries
         * @return {?}
         */
        EllipsisDirective.prototype.applyEllipsis = /**
         * Display ellipsis in the inner div if the text would exceed the boundaries
         * @return {?}
         */
            function () {
                var _this = this;
                // Remove the resize listener as changing the contained text would trigger events:
                this.removeResizeListener();
                // Find the best length by trial and error:
                /** @type {?} */
                var maxLength = EllipsisDirective.numericBinarySearch(this.originalText.length, function (curLength) {
                    _this.truncateText(curLength);
                    return !_this.isOverflowing;
                });
                // Apply the best length:
                this.truncateText(maxLength, (this.moreClickEmitter.observers.length > 0));
                // Re-attach the resize listener:
                this.addResizeListener();
            };
        Object.defineProperty(EllipsisDirective.prototype, "isOverflowing", {
            /**
             * Whether the text is exceeding the element's boundaries or not
             */
            get: /**
             * Whether the text is exceeding the element's boundaries or not
             * @return {?}
             */ function () {
                // Enforce hidden overflow (required to compare client width/height with scroll width/height)
                /** @type {?} */
                var currentOverflow = this.elem.style.overflow;
                if (!currentOverflow || currentOverflow === 'visible') {
                    this.elem.style.overflow = 'hidden';
                }
                /** @type {?} */
                var isOverflowing = this.elem.clientWidth < this.elem.scrollWidth - 1 || this.elem.clientHeight < this.elem.scrollHeight - 1;
                // Reset overflow to the original configuration:
                this.elem.style.overflow = currentOverflow;
                return isOverflowing;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Instance of https://github.com/wnr/element-resize-detector
         */
        EllipsisDirective.elementResizeDetector = null;
        EllipsisDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ellipsis]'
                    },] }
        ];
        /** @nocollapse */
        EllipsisDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: core.NgZone }
            ];
        };
        EllipsisDirective.propDecorators = {
            ellipsisCharacters: [{ type: core.Input, args: ['ellipsis',] }],
            ellipsisContent: [{ type: core.Input, args: ['ellipsis-content',] }],
            ellipsisWordBoundaries: [{ type: core.Input, args: ['ellipsis-word-boundaries',] }],
            resizeDetectionStrategy: [{ type: core.Input, args: ['ellipsis-resize-detection',] }],
            moreClickEmitter: [{ type: core.Output, args: ['ellipsis-click-more',] }],
            onResize: [{ type: core.HostListener, args: ['window:resize', ['$event'],] }]
        };
        return EllipsisDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var EllipsisModule = /** @class */ (function () {
        function EllipsisModule() {
        }
        EllipsisModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [EllipsisDirective],
                        exports: [EllipsisDirective]
                    },] }
        ];
        return EllipsisModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.EllipsisDirective = EllipsisDirective;
    exports.EllipsisModule = EllipsisModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,