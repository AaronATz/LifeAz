{"version":3,"file":"ngx-ellipsis.js.map","sources":["ng://ngx-ellipsis/lib/directives/ellipsis.directive.ts","ng://ngx-ellipsis/lib/ellipsis.module.ts"],"sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Renderer2,\n  Input,\n  Output,\n  EventEmitter,\n  NgZone,\n  HostListener,\n  OnChanges,\n  AfterViewInit,\n  OnDestroy\n} from '@angular/core';\nimport * as elementResizeDetectorMaker from 'element-resize-detector';\n\n/**\n * Directive to truncate the contained text, if it exceeds the element's boundaries\n * and append characters (configurable, default '...') if so.\n */\n@Directive({\n  selector: '[ellipsis]'\n})\nexport class EllipsisDirective implements OnChanges, OnDestroy, AfterViewInit {\n  /**\n   * Instance of https://github.com/wnr/element-resize-detector\n   */\n  private static elementResizeDetector: elementResizeDetectorMaker.Erd = null;\n\n  /**\n   * The original text (not truncated yet)\n   */\n  private originalText: string;\n\n  /**\n   * The referenced element\n   */\n  private elem: any;\n\n  /**\n   * Inner div element (will be auto-created)\n   */\n  private innerElem: any;\n\n  /**\n   * Whether the ellipsis should be applied on window resize\n   */\n  private applyOnWindowResize = false;\n\n  /**\n   * Remove function for the currently registered click listener\n   * on the link `this.ellipsisCharacters` are wrapped in.\n   */\n  private destroyMoreClickListener: () => void;\n\n  /**\n   * The ellipsis html attribute\n   * If anything is passed, this will be used as a string to append to\n   * the truncated contents.\n   * Else '...' will be appended.\n   */\n  @Input('ellipsis') ellipsisCharacters: string;\n\n  /**\n   * The ellipsis-content html attribute\n   * If passed this is used as content, else contents\n   * are fetched from innerHTML\n   */\n  @Input('ellipsis-content') ellipsisContent: string = null;\n\n  /**\n   * The ellipsis-word-boundaries html attribute\n   * If anything is passed, each character will be interpreted\n   * as a word boundary at which the text may be truncated.\n   * Else the text may be truncated at any character.\n   */\n  @Input('ellipsis-word-boundaries') ellipsisWordBoundaries: string;\n\n  /**\n   * The ellipsis-resize-detection html attribute\n   * Algorithm to use to detect element/window resize - any of the following:\n   * 'element-resize-detector': (default) Use https://github.com/wnr/element-resize-detector with its 'scroll' strategy\n   * 'element-resize-detector-object': Use https://github.com/wnr/element-resize-detector with its 'object' strategy (deprecated)\n   * 'window': Only check if the whole window has been resized/changed orientation by using angular's built-in HostListener\n   */\n  @Input('ellipsis-resize-detection') resizeDetectionStrategy: '' | 'element-resize-detector' | 'element-resize-detector-object' | 'window';\n\n  /**\n   * The ellipsis-click-more html attribute\n   *  If anything is passed, the ellipsisCharacters will be\n   *  wrapped in <a></a> tags and an event handler for the\n   *  passed function will be added to the link\n   */\n  @Output('ellipsis-click-more') moreClickEmitter: EventEmitter<any> = new EventEmitter();\n\n\n  /**\n   * Utility method to quickly find the largest number for\n   * which `callback(number)` still returns true.\n   * @param  max      Highest possible number\n   * @param  callback Should return true as long as the passed number is valid\n   * @return          Largest possible number\n   */\n  private static numericBinarySearch(max: number, callback: (n: number) => boolean): number {\n    let low = 0;\n    let high = max;\n    let best = -1;\n    let mid: number;\n\n    while (low <= high) {\n      // tslint:disable-next-line:no-bitwise\n      mid = ~~((low + high) / 2);\n      const result = callback(mid);\n      if (!result) {\n        high = mid - 1;\n      } else {\n        best = mid;\n        low = mid + 1;\n      }\n    }\n\n    return best;\n  }\n\n  /**\n   * Escape html special characters\n   * @param unsafe string potentially containing special characters\n   * @return       escaped string\n   */\n  private static escapeHtml(unsafe: string): string {\n    if (unsafe === undefined || unsafe === null) {\n      return '';\n    }\n\n    return String(unsafe)\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#039;');\n  }\n\n  /**\n   * The directive's constructor\n   */\n  public constructor(private elementRef: ElementRef, private renderer: Renderer2, private ngZone: NgZone) { }\n\n  /**\n   * Angular's init view life cycle hook.\n   * Initializes the element for displaying the ellipsis.\n   */\n  ngAfterViewInit() {\n    // let the ellipsis characters default to '...':\n    if (this.ellipsisCharacters === '') {\n      this.ellipsisCharacters = '...';\n    }\n\n    if (this.moreClickEmitter.observers.length > 0) {\n      this.ellipsisCharacters = `<a href=\"#\" class=\"ngx-ellipsis-more\">${this.ellipsisCharacters}</a>`;\n    }\n\n    // perform regex replace on word boundaries:\n    if (!this.ellipsisWordBoundaries) {\n      this.ellipsisWordBoundaries = '';\n    }\n    this.ellipsisWordBoundaries = '[' + this.ellipsisWordBoundaries.replace(/\\\\n/, '\\n').replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + ']';\n\n    // store the original contents of the element:\n    this.elem = this.elementRef.nativeElement;\n    if (this.ellipsisContent) {\n      this.originalText = EllipsisDirective.escapeHtml(this.ellipsisContent);\n    } else if (!this.originalText) {\n      this.originalText = this.elem.innerText;\n    }\n\n    // add a wrapper div (required for resize events to work properly):\n    this.renderer.setProperty(this.elem, 'innerHTML', '');\n    this.innerElem = this.renderer.createElement('div');\n    this.renderer.addClass(this.innerElem, 'ngx-ellipsis-inner');\n    const text = this.renderer.createText(this.originalText);\n    this.renderer.appendChild(this.innerElem, text);\n    this.renderer.appendChild(this.elem, this.innerElem);\n\n    // start listening for resize events:\n    this.addResizeListener(true);\n  }\n\n  /**\n   * Angular's change life cycle hook.\n   * Change original text (if the ellipsis-content has been passed)\n   * and re-render\n   */\n  ngOnChanges() {\n    if (!this.elem\n      || typeof this.ellipsisContent === 'undefined'\n      || this.originalText === EllipsisDirective.escapeHtml(this.ellipsisContent)) {\n      return;\n    }\n\n    this.originalText = EllipsisDirective.escapeHtml(this.ellipsisContent);\n    this.applyEllipsis();\n  }\n\n  /**\n   * Angular's destroy life cycle hook.\n   * Remove event listeners\n   */\n  ngOnDestroy() {\n    this.removeAllListeners();\n  }\n\n  /**\n   * remove all resize listeners\n   */\n  private removeAllListeners() {\n    if (this.destroyMoreClickListener) {\n      this.destroyMoreClickListener();\n    }\n\n    this.removeResizeListener();\n  }\n\n\n  /**\n   * Set up an event listener to call applyEllipsis() whenever a resize has been registered.\n   * The type of the listener (window/element) depends on the resizeDetectionStrategy.\n   * @param triggerNow=false if true, the ellipsis is applied immediately\n   */\n  private addResizeListener(triggerNow = false) {\n    if (typeof (this.resizeDetectionStrategy) === 'undefined') {\n      this.resizeDetectionStrategy = '';\n    }\n\n    switch (this.resizeDetectionStrategy) {\n      case 'window':\n        this.applyOnWindowResize = true;\n        if (triggerNow) {\n          this.applyEllipsis();\n        }\n        break;\n      case 'element-resize-detector-object':\n        this.addElementResizeListener(false);\n        break;\n      default:\n        if (typeof (console) !== 'undefined') {\n          console.warn(\n            `No such ellipsis-resize-detection strategy: '${this.resizeDetectionStrategy}'. Using 'element-resize-detector' instead`\n          );\n        }\n      // tslint:disable-next-line:no-switch-case-fall-through\n      case 'element-resize-detector':\n      case '':\n        this.addElementResizeListener();\n        break;\n    }\n  }\n\n  @HostListener('window:resize', ['$event']) onResize(event: Event) {\n    this.ngZone.run(() => {\n      if (this.applyOnWindowResize) {\n        this.applyEllipsis();\n      }\n    });\n  }\n\n  /**\n   * Set up an event listener to call applyEllipsis() whenever the element\n   * has been resized.\n   * @param scrollStrategy=true Use the default elementResizeDetector's - strategy - s. https://github.com/wnr/element-resize-detector\n   */\n  private addElementResizeListener(scrollStrategy = true) {\n    if (!EllipsisDirective.elementResizeDetector) {\n      const maker: any = elementResizeDetectorMaker;\n      EllipsisDirective.elementResizeDetector = maker({ strategy: scrollStrategy ? 'scroll' : 'object' });\n    }\n\n\n    let calledAsynchronously = false;\n    EllipsisDirective.elementResizeDetector.listenTo(this.elementRef.nativeElement, () => {\n      if (!calledAsynchronously) {\n        // elementResizeDetector fires the event directly after re-attaching the listener\n        // -> discard that first event:\n        return;\n      }\n      this.applyEllipsis();\n    });\n    calledAsynchronously = true;\n  }\n\n  /**\n   * Stop listening for any resize event.\n   */\n  private removeResizeListener() {\n    if (this.resizeDetectionStrategy !== 'window') {\n      if (EllipsisDirective.elementResizeDetector && this.elem) {\n        EllipsisDirective.elementResizeDetector.removeAllListeners(this.elem);\n      }\n    } else {\n      this.applyOnWindowResize = false;\n    }\n  }\n\n  /**\n   * Get the original text's truncated version. If the text really needed to\n   * be truncated, this.ellipsisCharacters will be appended.\n   * @param max the maximum length the text may have\n   * @return string       the truncated string\n   */\n  private getTruncatedText(max: number): string {\n    if (!this.originalText || this.originalText.length <= max) {\n      return this.originalText;\n    }\n\n    const truncatedText = this.originalText.substr(0, max);\n    if (this.ellipsisWordBoundaries === '[]' || this.originalText.charAt(max).match(this.ellipsisWordBoundaries)) {\n      return truncatedText + this.ellipsisCharacters;\n    }\n\n    let i = max - 1;\n    while (i > 0 && !truncatedText.charAt(i).match(this.ellipsisWordBoundaries)) {\n      i--;\n    }\n    return truncatedText.substr(0, i) + this.ellipsisCharacters;\n  }\n\n  /**\n   * Set the truncated text to be displayed in the inner div\n   * @param max the maximum length the text may have\n   * @param addMoreListener=false listen for click on the ellipsisCharacters if the text has been truncated\n   */\n  private truncateText(max: number, addMoreListener = false) {\n    const text = this.getTruncatedText(max);\n    this.renderer.setProperty(this.innerElem, 'innerHTML', text);\n\n    if (!addMoreListener) {\n      return;\n    }\n\n    // Remove any existing more click listener:\n    if (this.destroyMoreClickListener) {\n      this.destroyMoreClickListener();\n    }\n\n    // If the text has been truncated, add a more click listener:\n    if (text !== this.originalText) {\n      this.destroyMoreClickListener = this.renderer.listen(this.innerElem, 'click', (e: any) => {\n        if (!e.target || e.target.className !== 'ngx-ellipsis-more') {\n          return;\n        }\n        e.preventDefault();\n        this.moreClickEmitter.emit(e);\n      });\n    }\n  }\n\n  /**\n   * Display ellipsis in the inner div if the text would exceed the boundaries\n   */\n  private applyEllipsis() {\n    // Remove the resize listener as changing the contained text would trigger events:\n    this.removeResizeListener();\n\n    // Find the best length by trial and error:\n    const maxLength = EllipsisDirective.numericBinarySearch(this.originalText.length, curLength => {\n      this.truncateText(curLength);\n      return !this.isOverflowing;\n    });\n\n    // Apply the best length:\n    this.truncateText(maxLength, (this.moreClickEmitter.observers.length > 0));\n\n    // Re-attach the resize listener:\n    this.addResizeListener();\n  }\n\n\n  /**\n   * Whether the text is exceeding the element's boundaries or not\n   */\n  private get isOverflowing(): boolean {\n    // Enforce hidden overflow (required to compare client width/height with scroll width/height)\n    const currentOverflow = this.elem.style.overflow;\n    if (!currentOverflow || currentOverflow === 'visible') {\n      this.elem.style.overflow = 'hidden';\n    }\n\n    const isOverflowing = this.elem.clientWidth < this.elem.scrollWidth - 1 || this.elem.clientHeight < this.elem.scrollHeight - 1;\n\n    // Reset overflow to the original configuration:\n    this.elem.style.overflow = currentOverflow;\n\n    return isOverflowing;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { EllipsisDirective } from './directives/ellipsis.directive';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [EllipsisDirective],\n  exports: [EllipsisDirective]\n})\nexport class EllipsisModule { }\n"],"names":[],"mappings":"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"}
